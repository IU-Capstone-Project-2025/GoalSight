name: CI/CD Staging

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  backend:
    runs-on: ubuntu-latest
    env:
      DATABASE_USER: ${{ secrets.DATABASE_USER }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
      API_URL: ${{ secrets.API_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Docker and docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose-v2
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Create external Docker network
        run: docker network create goalsight-network || true

      - name: Pull latest images
        run: docker-compose -f docker/production/docker-compose.yml pull
        continue-on-error: true

      - name: Build and start backend and db containers
        run: docker-compose -f docker/production/docker-compose.yml up -d --build

      - name: Wait for PostgreSQL to be ready
        run: |
          timeout 60 bash -c 'until docker-compose -f docker/production/docker-compose.yml exec -T db pg_isready -U $DATABASE_USER -d $DATABASE_NAME; do echo "Waiting for DB..."; sleep 5; done'
        env:
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}

      - name: Show DB container logs (for debugging)
        run: docker-compose -f docker/production/docker-compose.yml logs db
        continue-on-error: true

      - name: Run migrations
        run: docker-compose -f docker/production/docker-compose.yml exec -T backend python manage.py migrate
        continue-on-error: false

      - name: Run backend tests
        run: docker-compose -f docker/production/docker-compose.yml exec -T backend python manage.py test
        continue-on-error: false

      - name: Stop containers
        if: always()
        run: docker-compose -f docker/production/docker-compose.yml down --volumes

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run component tests
        run: npm run test:components

      - name: Run API integration tests
        run: npm run test:api || echo "API integration tests failed but continuing..."
        continue-on-error: true

      - name: Run end-to-end tests
        run: npm run test:e2e || echo "E2E tests failed but continuing..."
        continue-on-error: true

      - name: Generate coverage for components
        run: npm run test:coverage:components || echo "Component coverage failed but continuing..."
        continue-on-error: true

      - name: Generate coverage for API integration
        run: npm run test:coverage:api || echo "API coverage failed but continuing..."
        continue-on-error: true

      - name: Lint
        run: npm run lint || echo "Lint errors (not failing build)"
        continue-on-error: true

  deploy:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd GoalSight
            git fetch origin
            git checkout staging
            git pull
            cd docker/staging
            docker compose down
            docker compose pull
            docker compose up --build -d
