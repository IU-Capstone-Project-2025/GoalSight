name: CI/CD Staging

on:
  pull_request:
    branches:
      - staging

jobs:
  ci_cd:
    runs-on: ubuntu-latest
    env:
      DATABASE_USER: ${{ secrets.DATABASE_USER }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
      API_URL: ${{ secrets.API_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies (frontend)
        run: npm ci
        working-directory: frontend

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
          sudo apt-get install -y ca-certificates curl gnupg lsb-release
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Create Docker .env file
        run: |
          cat <<EOF > docker/test/.env
          DATABASE_USER=${DATABASE_USER}
          DATABASE_NAME=${DATABASE_NAME}
          DATABASE_HOST=${DATABASE_HOST}
          DATABASE_PORT=${DATABASE_PORT}
          DATABASE_PASSWORD=${DATABASE_PASSWORD}
          SECRET_KEY=${SECRET_KEY}
          API_URL=${API_URL}
          EOF

      - name: Create external Docker network
        run: docker network create goalsight-network

      - name: Pull latest images
        run: docker compose -f docker/test/docker-compose.yml pull

      - name: Start full stack (test docker-compose)
        run: docker compose -f docker/test/docker-compose.yml up -d --build

      - name: Clean database volume
        run: docker volume rm $(docker volume ls -q -f name=postgres_data) || true

      - name: Reset test database
        run: |
          docker compose -f docker/test/docker-compose.yml exec -T backend python manage.py reset_db --noinput
          docker compose -f docker/test/docker-compose.yml exec -T backend python manage.py migrate

      - name: Wait for PostgreSQL to be ready
        run: |
          timeout 180 bash -c 'until docker compose -f docker/test/docker-compose.yml exec -T db pg_isready -U $DATABASE_USER -d $DATABASE_NAME; do echo "Waiting for DB..."; sleep 5; done'

      - name: Run migrations
        run: docker compose -f docker/test/docker-compose.yml exec -T backend python manage.py migrate

      - name: Run backend tests
        run: docker compose -f docker/test/docker-compose.yml exec -T backend python manage.py test

      - name: Run ML tests
        run: docker compose -f docker/test/docker-compose.yml exec -T backend sh -c "cd /app/goalsight/predictions && pytest tests/"
        
      - name: Wait for frontend to be ready
        run: |
          n=0
          until [ $n -ge 15 ]; do
            curl -f http://localhost:3000 && break
            echo "‚è≥ Waiting for frontend..."
            n=$((n+1))
            sleep 5
          done

      - name: Run component tests with coverage
        run: npm run test:coverage:components
        working-directory: frontend

      - name: Run API integration tests with coverage
        run: npm run test:coverage:api
        working-directory: frontend

      - name: Run end-to-end tests
        run: npm run test:e2e
        working-directory: frontend

      - name: Stop containers
        if: always()
        run: docker compose -f docker/test/docker-compose.yml down --volumes

      - name: Deploy to staging server
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd GoalSight
            git fetch origin
            git checkout staging
            git pull
            cd docker/staging
            docker compose down
            docker compose pull
            docker compose up --build -d
