      - name: Debug env in backend container
        run: |
          docker run --rm \
            --network ci-network \
            -e DATABASE_NAME=test_db \
            -e DATABASE_USER=test_user \
            -e DATABASE_PASSWORD=test_pass \
            -e DATABASE_HOST=postgres-backend \
            -e DATABASE_PORT=5432 \
            -e DJANGO_SETTINGS_MODULE=goalsight.settings \
            goalsight-backend env
      - name: Print Django DB settings
        run: |
          docker run --rm \
            --network ci-network \
            -e DATABASE_NAME=test_db \
            -e DATABASE_USER=test_user \
            -e DATABASE_PASSWORD=test_pass \
            -e DATABASE_HOST=postgres-backend \
            -e DATABASE_PORT=5432 \
            -e DJANGO_SETTINGS_MODULE=goalsight.settings \
            goalsight-backend python -c "from django.conf import settings; print(settings.DATABASES)"
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/goalsight
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d test_db" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Graphviz system dependencies
        run: sudo apt-get update && sudo apt-get install -y graphviz graphviz-dev
        
      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Wait for PostgreSQL
        run: |
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U test_user; do sleep 1; done'
        env:
          PGPASSWORD: test_pass
          
      - name: Build backend Docker image
        working-directory: backend
        run: docker build -f Dockerfile.prod -t goalsight-backend .
        
      - name: Create Docker network
        run: docker network create ci-network
        
      - name: Run PostgreSQL container for backend tests
        run: |
          docker run -d \
            --name postgres-backend \
            --network ci-network \
            -e POSTGRES_DB=test_db \
            -e POSTGRES_USER=test_user \
            -e POSTGRES_PASSWORD=test_pass \
            -p 5433:5432 \
            postgres:15
            
      - name: Wait for PostgreSQL container
        run: |
          timeout 30 bash -c 'until docker exec postgres-backend pg_isready -U test_user -d test_db; do sleep 2; done'
          
      - name: Run migrations in backend container
        run: |
          docker run --rm \
            --network ci-network \
            -e DATABASE_NAME=test_db \
            -e DATABASE_USER=test_user \
            -e DATABASE_PASSWORD=test_pass \
            -e DATABASE_HOST=postgres-backend \
            -e DATABASE_PORT=5432 \
            -e DJANGO_SETTINGS_MODULE=goalsight.settings \
            goalsight-backend python goalsight/manage.py migrate
            
      - name: Run tests in backend container
        run: |
          docker run --rm \
            --network ci-network \
            -e DATABASE_NAME=test_db \
            -e DATABASE_USER=test_user \
            -e DATABASE_PASSWORD=test_pass \
            -e DATABASE_HOST=postgres-backend \
            -e DATABASE_PORT=5432 \
            -e DJANGO_SETTINGS_MODULE=goalsight.settings \
            goalsight-backend python goalsight/manage.py test
            
      - name: Cleanup
        if: always()
        run: |
          docker stop postgres-backend || true
          docker rm postgres-backend || true
          docker network rm ci-network || true

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run component tests
        run: npm run test:components || echo "Component tests failed but continuing..."
        
      - name: Run API integration tests
        run: npm run test:api || echo "API integration tests failed but continuing..."
        continue-on-error: true
        
      - name: Run end-to-end tests
        run: npm run test:e2e || echo "E2E tests failed but continuing..."
        continue-on-error: true
        
      - name: Generate coverage for components
        run: npm run test:coverage:components || echo "Component coverage failed but continuing..."
        continue-on-error: true
        
      - name: Generate coverage for API integration
        run: npm run test:coverage:api || echo "API coverage failed but continuing..."
        continue-on-error: true
        
      - name: Lint
        run: npm run lint || echo "Lint errors (not failing build)"
        continue-on-error: true